import os
import re
import PyPDF2
from config import BASE_PATH
from logger import get_logger
from utils import verificar_estrutura_diretorio

logger = get_logger(__name__)


def extrair_dados_pdf(caminho_pdf):
    """
    Extrai dados de um arquivo PDF.
    Retorna um dicionário com os dados extraídos ou None em caso de erro.
    """
    logger.info(f"Extraindo dados do PDF: {caminho_pdf}")

    if not os.path.exists(caminho_pdf):
        logger.error(f"Arquivo PDF não encontrado: {caminho_pdf}")
        return None

    try:
        with open(caminho_pdf, 'rb') as file:
            reader = PyPDF2.PdfReader(file)

            # Extrair somente a primeira página
            if len(reader.pages) == 0:
                logger.warning(f"PDF sem páginas: {caminho_pdf}")
                return None

            primeira_pagina = reader.pages[0]
            texto = primeira_pagina.extract_text()

            if not texto:
                logger.warning(f"Texto não extraído do PDF: {caminho_pdf}")
                return None

            dados_extraidos = {}

            # Dividir o texto em linhas
            linhas = texto.splitlines()

            # Procurar a linha que contém "Solicitante/Endereço:" ou "Applicant/Address:"
            for i, linha in enumerate(linhas):
                if "Solicitante/Endereço:" in linha or "Applicant/Address:" in linha:
                    # O nome do solicitante é a próxima linha
                    if i + 1 < len(linhas):
                        dados_extraidos['Nome_Solicitante'] = linhas[i + 1].strip()

                    # Procurar o CNPJ nas próximas 5 linhas
                    for j in range(i + 1, min(i + 6, len(linhas))):
                        cnpj_match = re.search(r'\d{2}\.\d{3}\.\d{3}/\d{4}-\d{2}', linhas[j])
                        if cnpj_match:
                            dados_extraidos['CNPJ'] = cnpj_match.group()
                            break

                    break

            if 'Nome_Solicitante' not in dados_extraidos:
                logger.warning(f"Nome do solicitante não encontrado no PDF: {caminho_pdf}")

            if 'CNPJ' not in dados_extraidos:
                logger.warning(f"CNPJ não encontrado no PDF: {caminho_pdf}")

            return dados_extraidos

    except Exception as e:
        logger.error(f"Erro ao processar PDF {caminho_pdf}: {e}")
        return None


def pdf_extract(codigos_encontrados, base_path=BASE_PATH):
    """
    Processa uma lista de códigos, buscando e extraindo dados dos PDFs correspondentes.
    Retorna uma lista de tuplas (codigo, status, dados_pdf).
    """
    logger.info(f"Iniciando extração de PDFs para {len(codigos_encontrados)} códigos")
    logger.info(f"Usando caminho base: {base_path}")

    resultados = []

    for codigo in codigos_encontrados:
        logger.info(f"Processando código: {codigo}")

        # Verificar estrutura de diretórios
        caminho_certificado = verificar_estrutura_diretorio(codigo)
        if not caminho_certificado:
            logger.warning(f"Estrutura de diretórios inválida para {codigo}")
            resultados.append((codigo, "Pasta não encontrada", {}))
            continue

        # Procurar arquivo PDF
        pdf_encontrado = None
        for arquivo in os.listdir(caminho_certificado):
            if arquivo.endswith('.pdf') and arquivo.startswith(codigo):
                pdf_encontrado = arquivo
                break

        if not pdf_encontrado:
            logger.warning(f"PDF não encontrado para {codigo} em {caminho_certificado}")
            resultados.append((codigo, "PDF não encontrado", {}))
            continue

        # Extrair dados do PDF
        caminho_pdf = os.path.join(caminho_certificado, pdf_encontrado)
        dados_pdf = extrair_dados_pdf(caminho_pdf)

        if dados_pdf and 'Nome_Solicitante' in dados_pdf and 'CNPJ' in dados_pdf:
            logger.info(f"Dados extraídos com sucesso para {codigo}")
            resultados.append((codigo, "PDF encontrado e dados extraídos", dados_pdf))
        else:
            logger.warning(f"Falha ao extrair dados para {codigo}")
            resultados.append((codigo, "Falha na extração de dados", {}))

    logger.info(f"Extração concluída. Processados {len(resultados)} códigos")
    return resultados


# Código para teste individual
if __name__ == "__main__":
    from config import BASE_PATH

    # Usar os mesmos caminhos da configuração global
    logger.info("Executando teste individual de pdf_extract.py")

    # Códigos de exemplo para teste
    codigos_teste = [
        "LMP 24.0190",
        "LMP 24.0191",
        "LMP 25.0800X"
    ]

    resultados = pdf_extract(codigos_teste, BASE_PATH)

    # Exibir resultados
    for codigo, status, dados_pdf in resultados:
        print(f"Código: {codigo}")
        print(f"Status: {status}")
        print(f"Dados extraídos: {dados_pdf}")
        print("-" * 50)